'use strict';

var fs = require('fs'),
    path = require('path'),
	$ = require('jquery'),
	_ = require('underscore'),
	moment = require('moment');
	
var FileTree = function(dir, options) {
	
	console.log('FileTree!', dir, options);
	
	// V 0.3
	
	var _self = this,
		_dir = dir,
		_defaults = {
			addDates: false
		},
		_options = _.extend(options, _defaults),
		_tree,
		_$target,
		_$fileTree;
	
	function _init() {
		console.log('FileTree._init', _dir);
		
		
		
		console.log('_options', _options);
		_tree = _self.walk(_dir);
	}
			
	function _addEvents() {
		console.log('FileTree._addEvents');
		
		var $folders = $('.folder'),
			$files = $('.file');
			
		$folders.each(function() {
			var $folder = $(this);
			$folder.find('.item:first .title').click(function() {
				console.log('a folder item was clicked');
				$folder.data('isExpanded', $folder.data('isExpanded') !== undefined ? !$folder.data('isExpanded') : true);
				var $glyphicon = $folder.find('.glyphicon:first');
				if ($folder.data('isExpanded') === false) {
					$glyphicon
						.removeClass('glyphicon-folder-close')
						.addClass('glyphicon-folder-open');
					$folder.parent().find('.FileTree:first').show();
				} else {
					$glyphicon
						.removeClass('glyphicon-folder-open')
						.addClass('glyphicon-folder-close');
					$folder.parent().find('.FileTree:first').hide();
				}
			});
		});
		
		$files.each(function() {
			var $file = $(this);
			$file.find('.item:first .title').click(function() {
				console.log('a file item was clicked');
				if (_options.click !== undefined) {
					_options.click($file);
				}
			});
		});
		
		fs.watch(dir, function() {
			console.log('something changed');
			_refresh();
		});
	}
	
	function _refresh() {
		_self.render(_$target, true);
	}
	
	this.walk = function(filename) {
	    var stats = fs.lstatSync(filename),
	        info = {
	            path: path.resolve(filename),
	            name: path.basename(filename),
				//birthtime: stats.birthtime,
				atime: stats.atime,
				ctime: stats.ctime,
				mtime: stats.mtime
	        };
		
		if (info.name === '.DS_Store') { return null; }
				
	    if (stats.isDirectory() === true) {
	        info.type = 'folder';
	        info.children = fs.readdirSync(filename).map(function(child) {
				return _self.walk(path.resolve(filename, child));
	        });
	    } else {
	        // Assuming it's a file. In real life it could be a symlink or
	        // something else!
	        info.type = 'file';
			info.extension = path.extname(filename).replace(/^\./, '');
	    }
	    return info;
	};
	
	this.getData = function() {
		return _tree;
	};
	
	this.render = function($target, forceReload) {
		
		_$target = $target;
		
		$target.empty();
		
		if (forceReload === true) {
			_tree = _self.walk(_dir);
		}
		
		var pathToTemplate = __dirname + '/../templates/FileTree.tmpl.html',
			templateHTML = fs.readFileSync(pathToTemplate, 'utf8'),
			template = _.template(templateHTML);
		
		var partial = function(depth, obj) {
			depth = depth + 1;
			return template({tree: obj, depth: depth, partial: partial, moment: moment});
		};
		
		_$fileTree = $(partial(- 1, _tree));
		console.log(_$fileTree);
		
		$target.html(_$fileTree);
		_addEvents();
	}
	
	_init();
};

module.exports = function(dir, options) {
	return new FileTree(dir, options);
};