'use strict';

var PORT = process.env.PORT || 3000,
	//compression = require('compression'),
	express = require('express'),
	app = express(), io;


var MegaPlayerServer = function() {
	console.log('MegaPlayerServer!');
	
	var _player = new Player();
	
	function _listenToSocket(socket) {
		socket.on('ready', function() {
			console.log('ready command received');
			socket.emit('radiostations', require(process.cwd() + '/radiostations.json'));
		});
		socket.on('station', function(data) {
			console.log('station command received', data);
			_player.play(data);
		});
	}
	
	this.start = function() {
		app.use(express.static('public'));
		var server = app.listen(PORT, function () {
			var host = server.address().address,
				port = server.address().port;
				
			console.info('listening at http://%s:%s', host, port);
			
			io = require('socket.io').listen(server);
			io.on('connection', function(socket) {
				console.log('a user connected');
				_listenToSocket(socket)
			});
		});
	};
};

var Player = function() {
	var spawn = require('child_process').spawn,
		_mplayer,
		_volume = 50;
	
	function _init() {
		var options = ['-slave', '-idle', '-vo',  'null', '-volume', _volume, '-cache', '80', '-msglevel', 'statusline=6', '-msglevel', 'global=6'];
		//	_mode = file.indexOf('http') === 0 ? 'streaming' : 'static'; // this is not a very good distinction...
		_mplayer = spawn('mplayer', options);
	}
	
	function _sendCommand(cmd, feedback) {
		var result = _mplayer.stdin.write(cmd + '\n');
		console.log('result', result);
	}
	
	this.play = function(url) {
		var cmd = 'loadfile "' + url + '"\nvolume ' + Math.round(_volume) +  ' 1\n'; 
		console.log('->cmd', cmd);
		_sendCommand(cmd);
	}	
	
	_init();
};

module.exports = new MegaPlayerServer();