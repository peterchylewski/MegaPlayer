'use strict';

var _ = require('underscore'),
	_s = require('underscore.string'),
	spawn = require( 'child_process' ).spawn;

// http://stackoverflow.com/questions/12736723/how-can-i-use-child-process-spawn-to-pause-a-media-player
// http://davelers.com/Linux/Multimedia/files/865_slave.txt

var SlavePlayer = function() {
	console.log('SlavePlayer!');
	
	var _self = this,
		_mplayer,
		//_file = '/media/music/Pat Metheny Group - Offramp.flac'
		_info = {},
		_file = 'http://wdr-3-320.akacast.akamaistream.net/7/827/119437/v1/gnl.akacast.akamaistream.net/wdr-3-320';
	
	
	// ----------- create process and add events
	
	_mplayer = spawn( 'mplayer', [ '-slave', '-idle', _file ]);
	_mplayer.on( 'close', function(code) { console.log( 'CLOSE', ' exit code:', code ); } );
	_mplayer.on( 'exit', function() { console.log( 'EXIT.' ); } );
	
	_mplayer.stdout.on('data', function(data) {
		_parseStdOut(data);
	});
	_mplayer.stderr.on('data', function(data) {
		//console.log('mplayer stderr: ' + data);
	});
	
	//setInterval( function() { _self.getInfo(); }, 1000);
	
	// ----------- create process and add events (end)
	
	
	
	// ----------- commands
	
	this.send = function(cmd) {
		_mplayer.stdin.write( cmd + '\n' );
	}
	
	this.play = function(file) {
		console.log( 'PLAY ', file );		
		this.send('path "' + file + '"');
	};
	
	this.playList = function(path) {
		console.log( 'PLAYLIST ', path );		
		this.send('loadlist "' + path + '"');
	};
	
	this.prev = function() {
		console.log( 'PREV' );
		this.send('pt_step -1');
	};
	
	this.next = function() {
		console.log( 'NEXT' );
		this.send('pt_step 1');
	};
	
	this.mute = function() {
		console.log( 'MUTE' );
		this.send('mute');
	};
	
	this.pause = function() {
		console.log( 'PAUSE' );
		this.send('pause');
	};
	
	this.stop = function() {
		console.log( 'STOP' );
		this.send('stop');			
	};
	
	this.quit = function() {
		console.log( 'QUIT' );
		this.send('quit');
		//_mplayer.kill('SIGTERM');	
	};
	
	this.volumeUp = function() {
		//console.log( 'volumeUp' );
		this.send('volume +.1');
		_self.getInfo();
	};
	
	this.volumeDown = function() {
		//console.log( 'volumeDown' );
		this.send('volume -.1');
		_self.getInfo();
	};
	
	this.getInfo = function() {
		var commands = [
			'get_file_name',
			'get_meta_album',
			'get_meta_artist',
			'get_meta_comment',
			'get_meta_genre',
			'get_meta_title',
			'get_meta_track',
			'get_meta_year',
			'get_audio_bitrate',
			'get_audio_codec',
			'get_audio_samples',
			'get_time_length',
			'get_time_pos',
			'get_percent_pos',
			'get_property volume',
			'get_property filename',
			'get_property pause',
			'get_property paused',
			'get_property path'
		];
		this.send(commands.join('\n'));
	};
	
	function _parseStdOut(data) {
				
		var text = data.toString(),
			lines =_s.trim(text).split('\n'),
			ans, icy, volume,
			key, value,
			info = {};
				
		_.each(lines, function(line) {
			
			ans = line.match(/^ANS_([^=]*)=(.*)/);
			if (ans !== null) {
				key = _s.camelize(ans[1].toLowerCase().replace(/_/g, '-')),
				value = ans[2]
				info[key] = _s.trim(value, '\'');
			}
			
			icy = line.match(/^ICY Info\: StreamTitle=\'([^\']*)\';/);
			if (icy !== null) {
				//console.log('>>>>>>>icy', icy);
				info['radioMessage'] = icy[1];
			}
			
			volume = line.match(/^Volume\:(.*)/ig);
			if (volume !== null) {
				console.log('>>>>>>>volume', volume);
				_self.emit('volumeChanged', volume[1]);
				info['volume'] = volume[1];
			}
		});
		
		_.each(info, function(value, key) {
			if (info[key] !== _info[key]) {
				_self.emit('valueChanged', key, value);
				_info[key] = info[key];
			}
		});	
	}
	
} // SlavePlayer


var events = require('events'),
	util = require('util');
	
events.EventEmitter.call(SlavePlayer);
util.inherits(SlavePlayer, events.EventEmitter);

module.exports = new SlavePlayer();



// https://github.com/ctcherry/mplayerweb/blob/master/lib/mplayer.js

