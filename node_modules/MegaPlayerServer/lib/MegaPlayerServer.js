'use strict';

var PORT = process.env.PORT || 3000,
	//compression = require('compression'),
	express = require('express'),
	app = express(), io;

var MegaPlayerServer = function() {
	console.log('MegaPlayerServer!!!');
	
	var _player = new Player();
	
	function _listenToSocket(socket) {
		socket.on('ready', function() {
			console.log('ready command received');
			socket.emit('radiostations', require(process.cwd() + '/radiostations.json'));
		});
		socket.on('station', function(data) {
			console.log('station command received', data);
			_player.play(data);
		});
		socket.on('*', function(data) {
			console.log('message received', data);
		});
	}
	
	this.start = function() {
		
		app.use(express.static('public'));
		
		var server = app.listen(PORT, function () {
			var host = server.address().address,
				port = server.address().port;
				
			console.info('listening at http://%s:%s', host, port);
			
			io = require('socket.io').listen(server);
			io.on('connection', function(socket) {
				console.log('a user connected');
				_listenToSocket(socket)
			});
		});
	};
};

var events = require('events'),
	readline = require('readline'),
	util = require('util'),
	//charsetDetector = require('node-icu-charset-detector'),
	//Iconv  = require('iconv').Iconv,
	spawn = require('child_process').spawn,
	_ = require('underscore'),
	_s = require('underscore.string');

var Player = function() {
	var _mplayer,
		_rl = null,
		_volume = 50;
	
	function _init() {
		_checkForMPlayer();
	}
	
	function _checkForMPlayer(force) {
		if (force === true) { _mplayer == null; }
		if (_mplayer === undefined || _mplayer === null) {
			var options = ['-slave', '-idle', '-vo',  'null', '-volume', _volume, '-cache', '80', '-msglevel', 'statusline=6', '-msglevel', 'global=6'];
			//	_mode = file.indexOf('http') === 0 ? 'streaming' : 'static'; // this is not a very good distinction...
			console.log('spawning new player...');
			_mplayer = spawn('mplayer', options);
			_mplayer.stdout.on('data', function(buffer) {
				_decodePlayerMessage(buffer);
			} );
			_rl = readline.createInterface({
				input: _mplayer.stdout,
				output: _mplayer.stdin
			});
		}
	}
	
	/*
	function _fixEncoding(buffer) {
		var charset = charsetDetector.detectCharset(buffer),
			charsetConverter = new Iconv(charset.toString() || 'UTF-8', 'UTF-8');
		
		//console.log("charset name: " + charset.toString());
		//console.log("language: " + charset.language);
		//console.log("detection confidence: " + charset.confidence);
				
		return charsetConverter.convert(buffer);
	}
	*/
	
	function _sanitizeUTF8String(s) {
		// experimental https://github.com/felixge/node-unicode-sanitize/blob/master/index.js
		var replacement = '\ufffd';
		var loneSurrogates = /[\uD800-\uDBFF](?![\uDC00-\uDFFF])|([^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g;
		return s.replace(loneSurrogates, '$1' + replacement);
	}
	
	function _decodePlayerMessage(buffer) {
		//buffer = _fixEncoding(buffer);
		var raw = _s.trim(buffer.toString());
		console.log('raw      ', raw);
		console.log('sanitized', _sanitizeUTF8String(raw));
	}
	
	function _sendCommand(cmd, feedback) {
		_checkForMPlayer(true);
		var result = _mplayer.stdin.write(cmd + '\n');
		console.log('result', result);
	}
	
	this.play = function(url) {
		var cmd = 'loadfile "' + url + '"\nvolume ' + Math.round(_volume) +  ' 1\n'; 
		console.log('->cmd', cmd);
		_sendCommand(cmd);
	}	
	
	_init();
};

module.exports = new MegaPlayerServer();