{
  "name": "flac-metadata",
  "description": "FLAC metadata processor implemented as Transform stream",
  "keywords": [
    "flac",
    "metadata",
    "audio"
  ],
  "author": {
    "name": "Claus Wahlers",
    "email": "claus@codeazur.com.br",
    "url": "http://wahlers.com.br/claus/"
  },
  "homepage": "https://github.com/claus/flac-metadata",
  "version": "0.1.1",
  "license": "MIT",
  "main": "index.js",
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/claus/flac-metadata.git"
  },
  "bugs": {
    "url": "https://github.com/claus/flac-metadata/issues",
    "email": "claus@codeazur.com.br"
  },
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# flac-metadata\n\nA FLAC metadata processor for Node.js, implemented as Transform stream.\n\n## Installation\n\n```npm install flac-metadata```\n\n## Usage Examples\n\nSome simple examples to get you started:\n\n#### Noop\n\nDoes nothing, just pipes a source FLAC through the Processor into a target FLAC.\n\n```js\nvar fs = require(\"fs\");\nvar flac = require(\"flac-metadata\");\n\nvar reader = fs.createReadStream(\"source.flac\");\nvar writer = fs.createWriteStream(\"target.flac\");\nvar processor = new flac.Processor();\n\nreader.pipe(processor).pipe(writer);\n```\n\n#### Trace Metadata\n\nTraces out the metadata from a FLAC file.\n\n```js\nvar fs = require(\"fs\");\nvar flac = require(\"flac-metadata\");\n\nvar reader = fs.createReadStream(\"source.flac\");\nvar processor = new flac.Processor({ parseMetaDataBlocks: true });\nprocessor.on(\"postprocess\", function(mdb) {\n  console.log(mdb.toString());\n});\n\nreader.pipe(processor);\n```\n\nThe output should be something like this:\n\n```\n[MetaDataBlockStreamInfo] type: 0, isLast: false\n  minBlockSize: 4096\n  maxBlockSize: 4096\n  minFrameSize: 14\n  maxFrameSize: 12389\n  samples: 9750804\n  sampleRate: 44100\n  channels: 2\n  bitsPerSample: 16\n  duration: 3:41.107\n  checksum: 1746dff27beb6d1875a88cfeed8a576b\n\n[MetaDataBlockVorbisComment] type: 4, isLast: false\n  vendor: reference libFLAC 1.2.1 20070917\n  comments:\n    ALBUM: Close to the Glass\n    ARTIST: The Notwist\n    GENRE: Rock\n    DATE: 2014\n    TITLE: Signals\n\n[MetaDataBlockPicture] type: 6, isLast: true\n  pictureType: 3\n  mimeType: image/png\n  description:\n  width: 120\n  height: 120\n  bitsPerPixel: 32\n  colors: 0\n  pictureData: 391383\n```\n\n#### Strip All Metadata\n\nPipes a source FLAC through the Processor into a target FLAC, removing all metadata.\n\n```js\nvar fs = require(\"fs\");\nvar flac = require(\"flac-metadata\");\n\nvar reader = fs.createReadStream(\"source.flac\");\nvar writer = fs.createWriteStream(\"target.flac\");\nvar processor = new flac.Processor();\n\nprocessor.on(\"preprocess\", function(mdb) {\n  // STREAMINFO is always the first (and only mandatory) metadata block.\n  if (mdb.type === flac.Processor.MDB_TYPE_STREAMINFO) {\n    // When a metadata block's isLast flag is set to true in preprocess,\n    // subsequent blocks are automatically discarded.\n    mdb.isLast = true;\n  }\n});\n\nreader.pipe(processor).pipe(writer);\n```\n\n#### Inject Metadata\n\nInjects a VORBIS_COMMENT block (and removes the existing one, if any).\n\n```js\nvar fs = require(\"fs\");\nvar flac = require(\"flac-metadata\");\n\nvar reader = fs.createReadStream(\"source.flac\");\nvar writer = fs.createWriteStream(\"target.flac\");\nvar processor = new flac.Processor();\n\nvar mdbVorbis;\nvar vendor = \"reference libFLAC 1.2.1 20070917\";\nvar comments = [\n  \"ARTIST=Boyracer\",\n  \"TITLE=I've Got It And It's Not Worth Having\",\n  \"ALBUM=B Is For Boyracer\",\n  \"TRACKNUMBER=A1\",\n  \"DATE=1993\"\n];\n\nprocessor.on(\"preprocess\", function(mdb) {\n  // Remove existing VORBIS_COMMENT block, if any.\n  if (mdb.type === flac.Processor.MDB_TYPE_VORBIS_COMMENT) {\n    mdb.remove();\n  }\n  // Prepare to add new VORBIS_COMMENT block as last metadata block.\n  if (mdb.isLast) {\n    mdb.isLast = false;\n    mdbVorbis = flac.data.MetaDataBlockVorbisComment.create(true, vendor, comments);\n  }\n});\n\nprocessor.on(\"postprocess\", function(mdb) {\n  if (mdbVorbis) {\n    // Add new VORBIS_COMMENT block as last metadata block.\n    this.push(mdbVorbis.publish());\n  }\n});\n\nreader.pipe(processor).pipe(writer);\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "flac-metadata@0.1.1",
  "dist": {
    "shasum": "0cdfba085860a34568ab9d24dc62a6aa77713b00"
  },
  "_from": "flac-metadata@",
  "_resolved": "https://registry.npmjs.org/flac-metadata/-/flac-metadata-0.1.1.tgz"
}
