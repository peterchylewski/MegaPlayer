
var fs = require('fs');
  
var USBStreamReader = function(dev) {

	console.log('USBStreamReader!', dev);
	
	var _self = this,
		_keys = {
			16: 'q',
			20: 't',
			25: 'KEY_TAB',
			28: 'KEY_ENTER',
			38: 'l',
			57: 'KEY_SPACE',
			50: 'm',
			103: 'KEY_UP',
			105: 'KEY_LEFT',
			106: 'KEY_RIGHT',
			108: 'KEY_DOWN',
			113: 'KEY_MUTE',
			114: 'KEY_VOLUMEDOWN',
			115: 'KEY_VOLUMEUP',
			142: 'KEY_SHUTDOWN',    // peter's invention
			166: 'KEY_STOP'
		};
	
	function _keyboardListener() {
	
		var EVENT_KEY_KEYUP = 0,
			EVENT_KEY_KEYDOWN = 1,
			EVENT_TYPES = ['keyUp', 'keyDown'];
			
		//var _device = '/dev/input/by-id/usb-flirc.tv_flirc-event-kbd';
		
		var stream = fs.createReadStream('/dev/input/by-id/usb-flirc.tv_flirc-event-kbd');
	
		stream.on('data', function(buffer) {
			//console.log('buffer',  buffer);
			_parse(buffer);
		});
	
		function _parse(buffer) {
			var event = {
					timeS: buffer.readUInt32LE(0),
					timeU: buffer.readUInt32LE(4),
					type: EVENT_TYPES[buffer.readUInt16LE(28)],
					code: buffer.readUInt16LE(26),
					name: _decode(buffer.readUInt16LE(26))
				};
			//console.log(EVENT_TYPES[buffer.readUInt16LE(28)]);
			//console.log('event',  event);
			_self.emit(EVENT_TYPES[buffer.readUInt16LE(28)], event);
		}
	
		function _decode(key) {
			console.log('_decode', key);
			return (_keys[key] !== undefined ? _keys[key] : key);
		}
	}
	
	_keyboardListener();
	
	
	function _powermateListener() {
	
		var EVENT_BUTTON_PRESS_OR_RELEASE = 1,
			EVENT_WHEEL_TURN = 2,
			EVENT_TYPES = ['keyUp', 'keyDown'],
			PATH_TO_GRIFFIN_DEVICE = '/dev/input/by-id/usb-Griffin_Technology__Inc._Griffin_PowerMate-event-if00';
 		
 		if (fs.existsSync(PATH_TO_GRIFFIN_DEVICE) === false) {
 			console.log('WARNING: ' + PATH_TO_GRIFFIN_DEVICE + ' could not be found!');
 			return;
 		}
		// http://stackoverflow.com/questions/4589732/what-are-the-pros-and-cons-of-fs-createreadstream-vs-fs-readfile-in-node-js
		var stream = fs.createReadStream(PATH_TO_GRIFFIN_DEVICE, { 'bufferSize': 4 * 1024 });
		stream.on('data', function(buffer) {			
			var rawEvent = buffer.readUInt16LE(8);
			switch(rawEvent) {
				case EVENT_BUTTON_PRESS_OR_RELEASE:
					var event = {
						timeS: buffer.readUInt32LE(0),
						timeU: buffer.readUInt32LE(4),
						type: EVENT_TYPES[buffer.readUInt16LE(12)],
						name: 'KEY_POWER_MATE'
					};
					var type = EVENT_TYPES[buffer.readUInt16LE(12)];
					_self.emit(type, event);
				break;
				case EVENT_WHEEL_TURN:
					var direction = buffer.readUInt16LE(13) === 0 ? 'right' : 'left';
					_self.emit('wheelSpin', direction);
				break;
				default:
					console.log('something spooky happened');
			}
		});
		
	}
	
	_powermateListener();
	
	/*
	var Keyboard = require('node-keyboard'),
		keyboard = new Keyboard('by-id/usb-flirc.tv_flirc-event-kbd');
	
	
	
	var exec = require('child_process').exec,
		child;

	child = exec('cat /dev/input/by-id/usb-flirc.tv_flirc-event-kbd',
	  function (error, stdout, stderr) {
		//console.log('stdout: ' + stdout);
		//console.log('stderr: ' + stderr);
		if (error !== null) {
		  console.log('exec error: ' + error);
		}
	});

	child.stdout.on('data', function(data) {
		console.log('>>>>>>>>>>>>>>>>stdout');
		
		var s = new Buffer(data);
		
		console.log(s);
			
		console.log(decoder.write(s));
		
		
		
		if (Buffer.isBuffer(s)) {
    		if (s[0] > 127 && s[1] === undefined) {
      			s[0] -= 128;
      			s = '\x1b' + s.toString('utf-8');
    		} else {
      			s = s.toString('utf-8');
    		}
  		}
  		console.log(s);
  
	});
	*/
	/*
	var _self = this;
	
	this.bufferSize = 24;
  	this.buf = new Buffer(this.bufferSize);
  
	var fs = require('fs');
	
	fs.open('/dev/input/by-id/usb-flirc.tv_flirc-event-kbd', 'r', function(fd) {
		console.log('open');
		
		_self.onOpen(fd);
	});
	
	this.onOpen = function(fd) {
		console.log('onOpen');
  		this.fd = fd;
  		fs.read(this.fd, this.buf, 0, this.bufferSize, null, this.onRead);
	};
	
	this.onRead = function(bytesRead) {
  		console.log('onRead', bytesRead);
	};
	*/

}



  
  
  
/*
var exec = require('child_process').exec,
	child;

child = exec('cat /dev/input/by-id/usb-flirc.tv_flirc-event-kbd',
  function (error, stdout, stderr) {
	console.log('stdout: ' + stdout);
	console.log('stderr: ' + stderr);
	if (error !== null) {
	  console.log('exec error: ' + error);
	}
});

child.stdout.on('data', function (data) {
	console.log('stdout',  data);
	parse(data);
});

*/

var events = require('events'),
	util = require('util');
	
events.EventEmitter.call(USBStreamReader);
util.inherits(USBStreamReader, events.EventEmitter);

module.exports = new USBStreamReader();

